public static class Consts
{
    // Fields
    public const double AttackNumbersPower = 0.169;
    public const double AttackStrength = 1.0;
    public const double AutomaticObsoleteLossPct = 0.047619047619047616;
    public const double AverageQuality = 261.6;
    public const double BaseDesignHPMult = 0.3;
    public const double BombardAttackMult = 0.039;
    public const double CarryProductionLossPct = 0.076923076923076927;
    public const double ColonizationBonusMoveFactor = 2.1;
    public const double ColonizationBonusPct = 1.1346000000000003;
    public const double ColonizationHitPctPower = 0.9;
    public const double ColonizationValueGoldCost = 0.591715976331361;
    public const double CostMult = 0.13;
    public const double CostUpkeepPct = 0.21;
    public const double DeathStarDamageRndm = 0.169;
    public const double DeathStarFriendlyPopDamageMult = 0.26;
    public const double DeathStarPlanetDamageMult = 1.6666666666666667;
    public const double DefenseNumbersPower = 0.03;
    public const double DefenseStrength = 1.3;
    public const double DisbandHitPctPower = 1.0;
    public const double DisbandPct = 0.3;
    internal const double Double_Error = 8.6736173798840355E-19;
    public const double EmphasisValue = 5.0;
    public const double ExperienceConstDmgAmt = 1.0;
    public const double ExperienceDestroyMult = 0.09;
    public const double ExperienceMult = 0.13;
    public const double ExperienceRndm = 0.21;
    public const double ExperienceUpkeepPayoffMult = 3.3333333333333335;
    public const double ExpForGold = 3.3333333333333335;
    public const double GoldForProduction = 2.0;
    public const double GoldProductionForGold = 2.3076923076923075;
    public const int HomeworldDistance = 6;
    public const double Income = 0.13;
    public const double InvadeGoldIncPower = 0.3;
    public const double InvadeMultRandMax = 0.39;
    public const double ManualObsoleteLossPct = 0.16666666666666666;
    public const double MaxCostMult = 50.0;
    public const double MaxCostPower = 0.26;
    public const double MinCostMult = 1.0;
    public const double MoveOrderGold = 34.008;
    public const double MoveOrderShuffle = 0.13;
    public const double MovePopulationGoldCost = 0.065;
    public const double MoveSoldiersMult = 3.9;
    public const double NewResearchFactor = 390.0;
    public const double NonEmphasisValue = 3.0;
    public const double NumDesignsFactor = 3.9;
    public const double NumDesignsPower = 0.21;
    public const double PlanetCreationRate = 0.01;
    public const double PlanetDamageAvg = 0.3;
    public const int PlanetDistance = 3;
    public const int PlanetQualityMax = 390;
    public const int PlanetQualityMin = 0;
    public const double PlanetQualityOE = 66.6;
    public const double PopulationForGold = 3.6630036630036624;
    public const double PopulationGrowth = 0.021;
    public const double PopulationIncomeForGold = 0.59171597633136086;
    public const double ProductionForGold = 3.0;
    public const double ProductionForSoldiers = 1.0;
    public const double ProdUpkeepMult = 0.47619047619047616;
    public const double RepairCostMult = 0.3;
    public const double RepairGoldHPPct = 0.0591715976331361;
    public const double RepairGoldIncPowBase = 2.1;
    public const double ResearchFactor = 1300.0;
    public const double ResearchIncMult = 2.6;
    public const double ResearchIncPower = 0.39;
    public const double ResearchRndm = 0.3;
    public const double ResearchVictoryMult = 1.5;
    public const double SoldiersForGold = 3.9000000000000004;
    public const double SoldiersRndm = 0.26;
    public const double StartGold = 136032.0;
    public const double StartMinMult = 0.6;
    public const double StartPopulation = 130.0;
    public const double StartResearch = 390.0;
    public const double StartRndm = 0.13;
    public const double StoreProdLossPct = 0.14285714285714285;
    public const double SwitchBuildLossPct = 0.33333333333333331;
    public const double SwitchBuildTypeLossPct = 0.5;
    public const double TransLossMult = 0.666;
    public const double TransLossPctPower = 1.3;
    public const double TransLossRndm = 0.39;
    public const double UpkeepUnmovedReturn = 0.169;
    public const double WinPointsMult = 130.0;
    public const double WinPointsTilesPower = 0.39;

    // Methods
    private static double GetInvasionBonus(int initialWave, double gold)
    {
        if (gold == 0.0)
        {
            return 1.0;
        }
        return ((initialWave + (gold * Math.Pow(((double) initialWave) / gold, 0.3))) / ((double) initialWave));
    }

    public static double GetInvasionStrength(int attackers, double soldiers, int initialWave, double gold)
    {
        return RandomizeInvasionStr(GetInvasionStrengthBase(attackers, soldiers, initialWave, gold));
    }

    public static double GetInvasionStrengthBase(int attackers, double soldiers, int initialWave, double gold)
    {
        return GetStrengthBase(attackers, soldiers, GetInvasionBonus(initialWave, gold) * 1.0, 0.169);
    }

    internal static double GetMoveOrderGold(int numPlayers)
    {
        return (34.008 / (numPlayers - 1.0));
    }

    public static int GetPlanetDamage(int population)
    {
        return Game.Random.WeightedInt(population, 0.3);
    }

    public static double GetPlanetDamageMult()
    {
        return Game.Random.Weighted(0.3);
    }

    public static double GetPlanetDefenseStrength(int population, double soldiers)
    {
        return RandomizeInvasionStr(GetPlanetDefenseStrengthBase(population, soldiers));
    }

    public static double GetPlanetDefenseStrengthBase(int population, double soldiers)
    {
        return GetStrengthBase(population, soldiers, 1.3, 0.03);
    }

    public static double GetProductionUpkeep(int mapSize, int production)
    {
        return (((((double) production) / GetUpkeepPayoff(mapSize, false, 0, (double) 2.1)) / 3.7619047619047619) * 0.47619047619047616);
    }

    private static double GetStrengthBase(int troops, double soldiers, double strength, double power)
    {
        double retVal = strength * Math.Pow((double) troops, power);
        if (troops > 0)
        {
            return (retVal * (1.0 + (soldiers / ((double) troops))));
        }
        if (soldiers > 8.6736173798840355E-19)
        {
            throw new Exception();
        }
        return retVal;
    }

    private static double GetUpkeepPayoff(int mapSize, bool colony, int trans, double speed)
    {
        return ((((Math.Sqrt((double) mapSize) * (colony ? 0.39 : 0.78)) * ((Math.Pow((double) trans, 0.169) + 1.69) / 2.6)) * 3.9) / (2.1 + speed));
    }

    public static double GetUpkeepPayoff(int mapSize, bool colony, int trans, int speed)
    {
        return GetUpkeepPayoff(mapSize, colony, trans, (double) speed);
    }

    private static double RandomizeInvasionStr(double str)
    {
        return (str * (1.0 + Game.Random.DoubleHalf(0.39)));
    }
}